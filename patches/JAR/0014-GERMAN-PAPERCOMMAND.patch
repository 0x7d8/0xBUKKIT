From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Robert Jansen <63073556+rotvproHD@users.noreply.github.com>
Date: Mon, 26 Sep 2022 13:48:46 +0200
Subject: [PATCH] GERMAN PAPERCOMMAND

GERMAN PAPERCOMMAND

B3 - TRANSLATE PAPERCOMMAND MORE

B4 - FIX SMALL PAPERCOMMAND ISSUE

[P] #31 - TRANSLATE PAPERCOMMAND MORE

[P] #32 - FIX PAPERCOMMAND

[P] #33 - BETTER FORMATTING

[P] #33 - MORE TRANSLATION

diff --git a/src/main/java/io/papermc/paper/command/PaperCommand.java b/src/main/java/io/papermc/paper/command/PaperCommand.java
index 724592234e2a178a518f6ab7d09c3180780371a7..35ef86cb75cd9f0c650835274f9809d6d82acd18 100644
--- a/src/main/java/io/papermc/paper/command/PaperCommand.java
+++ b/src/main/java/io/papermc/paper/command/PaperCommand.java
@@ -34,6 +34,8 @@ import org.checkerframework.framework.qual.DefaultQualifier;
 import static net.kyori.adventure.text.Component.text;
 import static net.kyori.adventure.text.format.NamedTextColor.RED;
 
+import net.kyori.adventure.text.minimessage.MiniMessage; // 0xBUKKIT
+
 @DefaultQualifier(NonNull.class)
 public final class PaperCommand extends Command {
     static final String BASE_PERM = "bukkit.command.paper.";
@@ -68,8 +70,8 @@ public final class PaperCommand extends Command {
 
     public PaperCommand(final String name) {
         super(name);
-        this.description = "Paper related commands";
-        this.usageMessage = "/paper [" + String.join(" | ", SUBCOMMANDS.keySet()) + "]";
+        this.description = "PAPER BEFEHL";
+        this.usageMessage = "/paper <white>[ <gold>" + String.join(" <white>| <gold>", SUBCOMMANDS.keySet()) + " <white>]";
         final List<String> permissions = new ArrayList<>();
         permissions.add("bukkit.command.paper");
         permissions.addAll(SUBCOMMANDS.keySet().stream().map(s -> BASE_PERM + s).toList());
@@ -118,13 +120,13 @@ public final class PaperCommand extends Command {
         }
 
         if (args.length == 0) {
-            sender.sendMessage(text("Usage: " + this.usageMessage, RED));
+            sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Bitte nutze den Befehl richtig! <gold>" + this.usageMessage)); // 0xBUKKIT
             return false;
         }
         final @Nullable Pair<String, PaperSubcommand> subCommand = resolveCommand(args[0]);
 
         if (subCommand == null) {
-            sender.sendMessage(text("Usage: " + this.usageMessage, RED));
+            sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Bitte nutze den Befehl richtig! <gold>" + this.usageMessage)); // 0xBUKKIT
             return false;
         }
 
diff --git a/src/main/java/io/papermc/paper/command/subcommands/ChunkDebugCommand.java b/src/main/java/io/papermc/paper/command/subcommands/ChunkDebugCommand.java
index 628c549b1436c3de75071ecd6182a9beadd4840b..01a9c3f6f042f5d17db5a327a1bf593d7d911931 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/ChunkDebugCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/ChunkDebugCommand.java
@@ -30,6 +30,8 @@ import static net.kyori.adventure.text.format.NamedTextColor.DARK_AQUA;
 import static net.kyori.adventure.text.format.NamedTextColor.GREEN;
 import static net.kyori.adventure.text.format.NamedTextColor.RED;
 
+import net.kyori.adventure.text.minimessage.MiniMessage; // 0xBUKKIT
+
 @DefaultQualifier(NonNull.class)
 public final class ChunkDebugCommand implements PaperSubcommand {
     @Override
@@ -83,7 +85,7 @@ public final class ChunkDebugCommand implements PaperSubcommand {
             for (final String arg : args) {
                 org.bukkit.@Nullable World world = Bukkit.getWorld(arg);
                 if (world == null) {
-                    sender.sendMessage(text("World '" + arg + "' is invalid", RED));
+                    sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Die Welt <gold>" + arg + " <red>ist ungültig!")); // 0xBUKKIT
                     return;
                 }
                 worlds.add(world);
@@ -234,7 +236,7 @@ public final class ChunkDebugCommand implements PaperSubcommand {
 
     private void doDebug(final CommandSender sender, final String[] args) {
         if (args.length < 1) {
-            sender.sendMessage(text("Use /paper debug [chunks] help for more information on a specific command", RED));
+            sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Nutze <gold>/paper debug <white>[<gold>CHUNKS</gold>] <red>für mehr Informationen eines Spezifischen Befehls!")); // 0xBUKKIT
             return;
         }
 
@@ -242,22 +244,22 @@ public final class ChunkDebugCommand implements PaperSubcommand {
         switch (debugType) {
             case "chunks" -> {
                 if (args.length >= 2 && args[1].toLowerCase(Locale.ENGLISH).equals("help")) {
-                    sender.sendMessage(text("Use /paper debug chunks [world] to dump loaded chunk information to a file", RED));
+                    sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Nutze <gold>/paper debug chunks <white>[<gold>WELT</gold>] <red>um Chunk Informationen zu einer Datei zu schreiben!")); // 0xBUKKIT
                     break;
                 }
                 File file = new File(new File(new File("."), "debug"),
                     "chunks-" + DateTimeFormatter.ofPattern("yyyy-MM-dd_HH.mm.ss").format(LocalDateTime.now()) + ".txt");
-                sender.sendMessage(text("Writing chunk information dump to " + file, GREEN));
+                sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <yellow>Schreibe Chunk Informationen zu <gold>" + file + "<yellow>!")); // 0xBUKKIT
                 try {
                     MCUtil.dumpChunks(file, false);
-                    sender.sendMessage(text("Successfully written chunk information!", GREEN));
+                    sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <green>Chunk Informationen erfolgreich geschrieben!")); // 0xBUKKIT
                 } catch (Throwable thr) {
                     MinecraftServer.LOGGER.warn("Failed to dump chunk information to file " + file.toString(), thr);
-                    sender.sendMessage(text("Failed to dump chunk information, see console", RED));
+                    sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Konnte Chunk Informationen nicht schreiben, sieh Konsole!")); // 0xBUKKIT
                 }
             }
             // "help" & default
-            default -> sender.sendMessage(text("Use /paper debug [chunks] help for more information on a specific command", RED));
+            default -> sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Nutze <gold>/paper debug <white>[<gold>CHUNKS</gold>] <red>für mehr Informationen eines Spezifischen Befehls!")); // 0xBUKKIT
         }
     }
 
diff --git a/src/main/java/io/papermc/paper/command/subcommands/DumpItemCommand.java b/src/main/java/io/papermc/paper/command/subcommands/DumpItemCommand.java
index 771503ff637fea10d4d8be0f37f3f146c41791d9..8baa73b961826388608de6bdf423d783a6cb660f 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/DumpItemCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/DumpItemCommand.java
@@ -23,6 +23,8 @@ import static net.kyori.adventure.text.format.NamedTextColor.GRAY;
 import static net.kyori.adventure.text.format.NamedTextColor.YELLOW;
 import static net.kyori.adventure.text.format.TextDecoration.ITALIC;
 
+import net.kyori.adventure.text.minimessage.MiniMessage; // 0xBUKKIT
+
 @DefaultQualifier(NonNull.class)
 public final class DumpItemCommand implements PaperSubcommand {
     @Override
@@ -33,7 +35,7 @@ public final class DumpItemCommand implements PaperSubcommand {
 
     private void doDumpItem(final CommandSender sender) {
         if (!(sender instanceof Player)) {
-            sender.sendMessage("Only players can use this command");
+            sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Nur Spieler können diesen Befehl benutzen!")); // 0xBUKKIT
             return;
         }
         final ItemStack itemStack = CraftItemStack.asNMSCopy(((CraftPlayer) sender).getItemInHand());
@@ -51,7 +53,7 @@ public final class DumpItemCommand implements PaperSubcommand {
             .build();
         Bukkit.getConsoleSender().sendMessage(message);
         sender.sendMessage(message);
-        sender.sendMessage(text().content("    Click to copy item to clipboard")
+        sender.sendMessage(text().content("    Klicke um in Zwischenablage zu kopieren!") // 0xBUKKIT
             .color(GRAY)
             .decorate(ITALIC)
             .clickEvent(ClickEvent.copyToClipboard(tag == null ? itemId : (itemId + tag))));
diff --git a/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java b/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
index 0dc96c39151ec4dbeec3947cb17606f53a6392d4..353e8356be43d48206f5d706f3a6ddda3c5e7aea 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
@@ -29,6 +29,8 @@ import org.checkerframework.framework.qual.DefaultQualifier;
 import static net.kyori.adventure.text.Component.text;
 import static net.kyori.adventure.text.format.NamedTextColor.RED;
 
+import net.kyori.adventure.text.minimessage.MiniMessage; // 0xBUKKIT
+
 @DefaultQualifier(NonNull.class)
 public final class EntityCommand implements PaperSubcommand {
     @Override
@@ -81,7 +83,7 @@ public final class EntityCommand implements PaperSubcommand {
             } else if (sender instanceof Player) {
                 worldName = ((Player) sender).getWorld().getName();
             } else {
-                sender.sendMessage(text("Please specify the name of a world", RED));
+                sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Bitte gebe einen Welt Namen an!")); // 0xBUKKIT
                 sender.sendMessage(text("To do so without a filter, specify '*' as the filter", RED));
                 sender.sendMessage(text("Usage: /paper entity list [filter] [worldName]", RED));
                 return;
@@ -112,7 +114,7 @@ public final class EntityCommand implements PaperSubcommand {
                 Pair<Integer, Map<ChunkPos, Integer>> info = list.get(name);
                 int nonTicking = nonEntityTicking.getOrDefault(name, 0);
                 if (info == null) {
-                    sender.sendMessage(text("No entities found.", RED));
+                    sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Keine Entitäten gefunden!")); // 0xBUKKIT
                     return;
                 }
                 sender.sendMessage("Entity: " + name + " Total Ticking: " + (info.getLeft() - nonTicking) + ", Total Non-Ticking: " + nonTicking);
@@ -127,7 +129,7 @@ public final class EntityCommand implements PaperSubcommand {
                     .toList();
 
                 if (info.isEmpty()) {
-                    sender.sendMessage(text("No entities found.", RED));
+                    sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Keine Entitäten gefunden!")); // 0xBUKKIT
                     return;
                 }
 
diff --git a/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java b/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
index 450bd95218852174cfbc88d4517e17daee5ffd5f..f564ce346c92d3b0f4c243bb0b7643799f64ef38 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
@@ -25,6 +25,8 @@ import static net.kyori.adventure.text.format.NamedTextColor.DARK_AQUA;
 import static net.kyori.adventure.text.format.NamedTextColor.GREEN;
 import static net.kyori.adventure.text.format.NamedTextColor.RED;
 
+import net.kyori.adventure.text.minimessage.MiniMessage; // 0xBUKKIT
+
 @DefaultQualifier(NonNull.class)
 public final class FixLightCommand implements PaperSubcommand {
     @Override
@@ -35,7 +37,7 @@ public final class FixLightCommand implements PaperSubcommand {
 
     private void doFixLight(final CommandSender sender, final String[] args) {
         if (!(sender instanceof Player)) {
-            sender.sendMessage(text("Only players can use this command", RED));
+            sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Nur Spieler können diesen Befehl benutzen!")); // 0xBUKKIT
             return;
         }
         @Nullable Runnable post = null;
@@ -44,7 +46,7 @@ public final class FixLightCommand implements PaperSubcommand {
             try {
                 final int parsed = Integer.parseInt(args[0]);
                 if (parsed < 0) {
-                    sender.sendMessage(text("Radius cannot be negative!", RED));
+                    sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Radius kann nicht negativ sein!")); // 0xBUKKIT
                     return;
                 }
                 final int maxRadius = 32;
@@ -53,7 +55,7 @@ public final class FixLightCommand implements PaperSubcommand {
                     post = () -> sender.sendMessage(text("Radius '" + parsed + "' was not in the required range [0, " + maxRadius + "], it was lowered to the maximum (" + maxRadius + " chunks).", RED));
                 }
             } catch (final Exception e) {
-                sender.sendMessage(text("'" + args[0] + "' is not a valid number.", RED));
+                sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Keine Nummer!")); // 0xBUKKIT
                 return;
             }
         }
diff --git a/src/main/java/io/papermc/paper/command/subcommands/HeapDumpCommand.java b/src/main/java/io/papermc/paper/command/subcommands/HeapDumpCommand.java
index cd2e4d792e972b8bf1e07b8961594a670ae949cf..c991f2be50cdcdf39de46b01c5fd760f03825ac4 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/HeapDumpCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/HeapDumpCommand.java
@@ -14,6 +14,8 @@ import static net.kyori.adventure.text.format.NamedTextColor.GREEN;
 import static net.kyori.adventure.text.format.NamedTextColor.RED;
 import static net.kyori.adventure.text.format.NamedTextColor.YELLOW;
 
+import net.kyori.adventure.text.minimessage.MiniMessage; // 0xBUKKIT
+
 @DefaultQualifier(NonNull.class)
 public final class HeapDumpCommand implements PaperSubcommand {
     @Override
@@ -26,13 +28,13 @@ public final class HeapDumpCommand implements PaperSubcommand {
         java.nio.file.Path dir = java.nio.file.Paths.get("./dumps");
         String name = "heap-dump-" + DateTimeFormatter.ofPattern("yyyy-MM-dd_HH.mm.ss").format(LocalDateTime.now());
 
-        Command.broadcastCommandMessage(sender, text("Writing JVM heap data...", YELLOW));
+        Command.broadcastCommandMessage(sender, MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <yellow>Schreibe JVM Heap Daten!")); // 0xBUKKIT
 
         java.nio.file.Path file = CraftServer.dumpHeap(dir, name);
         if (file != null) {
-            Command.broadcastCommandMessage(sender, text("Heap dump saved to " + file, GREEN));
+            Command.broadcastCommandMessage(sender, MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <green>Heap Dump wurde zu <gold>" + file + " <green>geschrieben!")); // 0xBUKKIT
         } else {
-            Command.broadcastCommandMessage(sender, text("Failed to write heap dump, see server log for details", RED));
+            Command.broadcastCommandMessage(sender, MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Fehler bei Heap Dump, Fehler sind in der Konsole!")); // 0xBUKKIT
         }
     }
 }
diff --git a/src/main/java/io/papermc/paper/command/subcommands/MobcapsCommand.java b/src/main/java/io/papermc/paper/command/subcommands/MobcapsCommand.java
index 2e02d94e2903c48f6d08e743c1cf8bad9f9662df..21d6d32dab8e11b57fe9b21c636f472f269094d5 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/MobcapsCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/MobcapsCommand.java
@@ -29,6 +29,8 @@ import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.framework.qual.DefaultQualifier;
 
+import net.kyori.adventure.text.minimessage.MiniMessage; // 0xBUKKIT
+
 @DefaultQualifier(NonNull.class)
 public final class MobcapsCommand implements PaperSubcommand {
     static final Map<MobCategory, TextColor> MOB_CATEGORY_COLORS = ImmutableMap.<MobCategory, TextColor>builder()
@@ -100,14 +102,14 @@ public final class MobcapsCommand implements PaperSubcommand {
             } else {
                 final @Nullable World world = Bukkit.getWorld(input);
                 if (world == null) {
-                    sender.sendMessage(Component.text("'" + input + "' is not a valid world!", NamedTextColor.RED));
+                    sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Die Welt <gold>" + input + " <red>wurde nicht gefunden!")); // 0xBUKKIT
                     return;
                 } else {
                     worlds = List.of(world);
                 }
             }
         } else {
-            sender.sendMessage(Component.text("Too many arguments!", NamedTextColor.RED));
+            sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Zu viele Argumente!")); // 0xBUKKIT
             return;
         }
 
@@ -153,11 +155,11 @@ public final class MobcapsCommand implements PaperSubcommand {
             final String input = args[0];
             player = Bukkit.getPlayerExact(input);
             if (player == null) {
-                sender.sendMessage(Component.text("Could not find player named '" + input + "'", NamedTextColor.RED));
+                sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Konnte keinen Spieler Namens <gold>" + input + " <red>finden!")); // 0xBUKKIT
                 return;
             }
         } else {
-            sender.sendMessage(Component.text("Too many arguments!", NamedTextColor.RED));
+            sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Zu viele Argumente!")); // 0xBUKKIT
             return;
         }
 
@@ -219,7 +221,7 @@ public final class MobcapsCommand implements PaperSubcommand {
                             Component.text("/", NamedTextColor.GRAY),
                             Component.text('a')
                         )
-                        .hoverEvent(Component.text("This category does not naturally spawn.")));
+                        .hoverEvent(Component.text("Diese Kategorie spawnt nicht natürlich!"))); // 0xBUKKIT
                 }
                 return builder;
             })
diff --git a/src/main/java/io/papermc/paper/command/subcommands/ReloadCommand.java b/src/main/java/io/papermc/paper/command/subcommands/ReloadCommand.java
index bd68139ae635f2ad7ec8e7a21e0056a139c4c62e..4db7b79616fc033ff4be5b737c618b9a06ae4ad4 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/ReloadCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/ReloadCommand.java
@@ -12,6 +12,8 @@ import static net.kyori.adventure.text.Component.text;
 import static net.kyori.adventure.text.format.NamedTextColor.GREEN;
 import static net.kyori.adventure.text.format.NamedTextColor.RED;
 
+import net.kyori.adventure.text.minimessage.MiniMessage; // 0xBUKKIT
+
 @DefaultQualifier(NonNull.class)
 public final class ReloadCommand implements PaperSubcommand {
     @Override
@@ -21,13 +23,13 @@ public final class ReloadCommand implements PaperSubcommand {
     }
 
     private void doReload(final CommandSender sender) {
-        Command.broadcastCommandMessage(sender, text("Please note that this command is not supported and may cause issues.", RED));
-        Command.broadcastCommandMessage(sender, text("If you encounter any issues please use the /stop command to restart your server.", RED));
+        Command.broadcastCommandMessage(sender, MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Die Konfiguration neu zu laden ist nicht unterstützt!")); // 0xBUKKIT
+        Command.broadcastCommandMessage(sender, MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Bei Problemen den Server neustarten!")); // 0xBUKKIT
 
         MinecraftServer server = ((CraftServer) sender.getServer()).getServer();
         server.paperConfigurations.reloadConfigs(server);
         server.server.reloadCount++;
 
-        Command.broadcastCommandMessage(sender, text("Paper config reload complete.", GREEN));
+        Command.broadcastCommandMessage(sender, MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <gold>PAPER <green>Konfiguration neu geladen!")); // 0xBUKKIT
     }
 }
diff --git a/src/main/java/io/papermc/paper/command/subcommands/SyncLoadInfoCommand.java b/src/main/java/io/papermc/paper/command/subcommands/SyncLoadInfoCommand.java
index 1120aef5b0dd983c467167f77245884e1198552a..61b7c1a04d523f0c7722c840bc88fa07faf57e9a 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/SyncLoadInfoCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/SyncLoadInfoCommand.java
@@ -22,6 +22,8 @@ import static net.kyori.adventure.text.format.NamedTextColor.GRAY;
 import static net.kyori.adventure.text.format.NamedTextColor.GREEN;
 import static net.kyori.adventure.text.format.NamedTextColor.RED;
 
+import net.kyori.adventure.text.minimessage.MiniMessage; // 0xBUKKIT
+
 @DefaultQualifier(NonNull.class)
 public final class SyncLoadInfoCommand implements PaperSubcommand {
     @Override
@@ -37,13 +39,13 @@ public final class SyncLoadInfoCommand implements PaperSubcommand {
 
     private void doSyncLoadInfo(final CommandSender sender, final String[] args) {
         if (!SyncLoadFinder.ENABLED) {
-            sender.sendMessage(text("This command requires the server startup flag '-Dpaper.debug-sync-loads=true' to be set.", RED));
+            sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Du brauchst dafür <gold>-Dpaper.debug-sync-loads=true <red>in deinen Start Argumenten!")); // 0xBUKKIT
             return;
         }
 
         if (args.length > 0 && args[0].equals("clear")) {
             SyncLoadFinder.clear();
-            sender.sendMessage(text("Sync load data cleared.", GRAY));
+            sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <green>Sync Load Daten geleert!")); // 0xBUKKIT
             return;
         }
 
