From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: root <root@ROBERT-PC.localdomain>
Date: Fri, 17 Jun 2022 22:46:37 +0200
Subject: [PATCH] GERMAN ENTITYSELECTIONPARSER

GERMAN ENTITYSELECTIONPARSER2

diff --git a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
index a57ae219d57ed47baedfb73b3d815f39d4f87035..ba9a06f469b72fc768793bcba57ee150f293a6e8 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
@@ -28,6 +28,9 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import io.papermc.paper.adventure.PaperAdventure; // 0xBUKKIT start
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.kyori.adventure.text.minimessage.tag.resolver.Placeholder; // 0xBUKKIT end
 
 public class EntitySelectorParser {
 
@@ -43,15 +46,15 @@ public class EntitySelectorParser {
     private static final char SELECTOR_RANDOM_PLAYERS = 'r';
     private static final char SELECTOR_CURRENT_ENTITY = 's';
     private static final char SELECTOR_ALL_ENTITIES = 'e';
-    public static final SimpleCommandExceptionType ERROR_INVALID_NAME_OR_UUID = new SimpleCommandExceptionType(Component.translatable("argument.entity.invalid"));
+    public static final SimpleCommandExceptionType ERROR_INVALID_NAME_OR_UUID = new SimpleCommandExceptionType(PaperAdventure.asVanilla(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Entität nicht gefunden!"))); // 0xBUKKIT
     public static final DynamicCommandExceptionType ERROR_UNKNOWN_SELECTOR_TYPE = new DynamicCommandExceptionType((object) -> {
-        return Component.translatable("argument.entity.selector.unknown", object);
+        return PaperAdventure.asVanilla(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Unbekannter Selektor Typ <gold>" + object + "<red>!")); // 0xBUKKIT
     });
-    public static final SimpleCommandExceptionType ERROR_SELECTORS_NOT_ALLOWED = new SimpleCommandExceptionType(Component.translatable("argument.entity.selector.not_allowed"));
-    public static final SimpleCommandExceptionType ERROR_MISSING_SELECTOR_TYPE = new SimpleCommandExceptionType(Component.translatable("argument.entity.selector.missing"));
-    public static final SimpleCommandExceptionType ERROR_EXPECTED_END_OF_OPTIONS = new SimpleCommandExceptionType(Component.translatable("argument.entity.options.unterminated"));
+    public static final SimpleCommandExceptionType ERROR_SELECTORS_NOT_ALLOWED = new SimpleCommandExceptionType(PaperAdventure.asVanilla(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Der Selektor ist nicht erlaubt!"))); // 0xBUKKIT start
+    public static final SimpleCommandExceptionType ERROR_MISSING_SELECTOR_TYPE = new SimpleCommandExceptionType(PaperAdventure.asVanilla(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Der Selektor Typ Fehlt!")));
+    public static final SimpleCommandExceptionType ERROR_EXPECTED_END_OF_OPTIONS = new SimpleCommandExceptionType(PaperAdventure.asVanilla(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Erwartetes Ende von Optionen!"))); // 0xBUKKIT end
     public static final DynamicCommandExceptionType ERROR_EXPECTED_OPTION_VALUE = new DynamicCommandExceptionType((object) -> {
-        return Component.translatable("argument.entity.options.valueless", object);
+        return PaperAdventure.asVanilla(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Wert erwartet für Option <gold>" + object + "<red>!")); // 0xBUKKIT
     });
     public static final BiConsumer<Vec3, List<? extends Entity>> ORDER_ARBITRARY = (vec3d, list) -> {
     };
