From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: root <root@ROBERT-PC.localdomain>
Date: Fri, 17 Jun 2022 21:05:23 +0200
Subject: [PATCH] GERMAN WHITELISTCOMMAND


diff --git a/src/main/java/net/minecraft/server/commands/WhitelistCommand.java b/src/main/java/net/minecraft/server/commands/WhitelistCommand.java
index 0f1d7d2185182b27a7624c1f255c0f36e2349ad1..bc201f27cba49721e482fe2ce0a984599cdd9517 100644
--- a/src/main/java/net/minecraft/server/commands/WhitelistCommand.java
+++ b/src/main/java/net/minecraft/server/commands/WhitelistCommand.java
@@ -14,12 +14,15 @@ import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.server.players.UserWhiteList;
 import net.minecraft.server.players.UserWhiteListEntry;
+import io.papermc.paper.adventure.PaperAdventure; // 0xBUKKIT start
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.kyori.adventure.text.minimessage.tag.resolver.Placeholder; // 0xBUKKIT end
 
 public class WhitelistCommand {
-    private static final SimpleCommandExceptionType ERROR_ALREADY_ENABLED = new SimpleCommandExceptionType(Component.translatable("commands.whitelist.alreadyOn"));
-    private static final SimpleCommandExceptionType ERROR_ALREADY_DISABLED = new SimpleCommandExceptionType(Component.translatable("commands.whitelist.alreadyOff"));
-    private static final SimpleCommandExceptionType ERROR_ALREADY_WHITELISTED = new SimpleCommandExceptionType(Component.translatable("commands.whitelist.add.failed"));
-    private static final SimpleCommandExceptionType ERROR_NOT_WHITELISTED = new SimpleCommandExceptionType(Component.translatable("commands.whitelist.remove.failed"));
+    private static final SimpleCommandExceptionType ERROR_ALREADY_ENABLED = new SimpleCommandExceptionType(PaperAdventure.asVanilla(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Die Whitelist ist schon <gold>AN<red>!"))); // 0xBUKKIT start
+    private static final SimpleCommandExceptionType ERROR_ALREADY_DISABLED = new SimpleCommandExceptionType(PaperAdventure.asVanilla(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Die Whitelist ist schon <gold>AUS<red>!")));
+    private static final SimpleCommandExceptionType ERROR_ALREADY_WHITELISTED = new SimpleCommandExceptionType(PaperAdventure.asVanilla(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Der Spieler ist schon auf der Whitelist!")));
+    private static final SimpleCommandExceptionType ERROR_NOT_WHITELISTED = new SimpleCommandExceptionType(PaperAdventure.asVanilla(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Der Spieler ist nicht auf der Whitelist!"))); // 0xBUKKIT end
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
         dispatcher.register(Commands.literal("whitelist").requires((source) -> {
@@ -50,7 +53,7 @@ public class WhitelistCommand {
 
     private static int reload(CommandSourceStack source) {
         source.getServer().getPlayerList().reloadWhiteList();
-        source.sendSuccess(Component.translatable("commands.whitelist.reloaded"), true);
+        source.sendSuccess(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <green>Whitelist neu geladen!")); // 0xBUKKIT
         source.getServer().kickUnlistedPlayers(source);
         return 1;
     }
@@ -63,7 +66,7 @@ public class WhitelistCommand {
             if (!userWhiteList.isWhiteListed(gameProfile)) {
                 UserWhiteListEntry userWhiteListEntry = new UserWhiteListEntry(gameProfile);
                 userWhiteList.add(userWhiteListEntry);
-                source.sendSuccess(Component.translatable("commands.whitelist.add.success", ComponentUtils.getDisplayName(gameProfile)), true);
+                source.sendSuccess(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <green>Der Spieler <gold><player> <green>wurde zur Whitelist hinzugef√ºgt!", Placeholder.component("player", PaperAdventure.asAdventure(ComponentUtils.getDisplayName(gameProfile))))); // 0xBUKKIT
                 ++i;
             }
         }
@@ -83,7 +86,7 @@ public class WhitelistCommand {
             if (userWhiteList.isWhiteListed(gameProfile)) {
                 UserWhiteListEntry userWhiteListEntry = new UserWhiteListEntry(gameProfile);
                 userWhiteList.remove(userWhiteListEntry);
-                source.sendSuccess(Component.translatable("commands.whitelist.remove.success", ComponentUtils.getDisplayName(gameProfile)), true);
+                source.sendSuccess(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <green>Der Spieler <gold><player> <green>wurde von der Whitelist entfernt!", Placeholder.component("player", PaperAdventure.asAdventure(ComponentUtils.getDisplayName(gameProfile))))); // 0xBUKKIT
                 ++i;
             }
         }
@@ -102,7 +105,7 @@ public class WhitelistCommand {
             throw ERROR_ALREADY_ENABLED.create();
         } else {
             playerList.setUsingWhiteList(true);
-            source.sendSuccess(Component.translatable("commands.whitelist.enabled"), true);
+            source.sendSuccess(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <green>Die Whitelist ist nun <gold>AN<green>!")); // 0xBUKKIT
             source.getServer().kickUnlistedPlayers(source);
             return 1;
         }
@@ -114,7 +117,7 @@ public class WhitelistCommand {
             throw ERROR_ALREADY_DISABLED.create();
         } else {
             playerList.setUsingWhiteList(false);
-            source.sendSuccess(Component.translatable("commands.whitelist.disabled"), true);
+            source.sendSuccess(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <green>Die Whitelist ist nun <gold>AUS<green>!")); // 0xBUKKIT
             return 1;
         }
     }
@@ -122,9 +125,9 @@ public class WhitelistCommand {
     private static int showList(CommandSourceStack source) {
         String[] strings = source.getServer().getPlayerList().getWhiteListNames();
         if (strings.length == 0) {
-            source.sendSuccess(Component.translatable("commands.whitelist.none"), false);
+            source.sendSuccess(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <red>Es sind keine Spieler auf der Whitelist!")); // 0xBUKKIT
         } else {
-            source.sendSuccess(Component.translatable("commands.whitelist.list", strings.length, String.join(", ", strings)), false);
+            source.sendSuccess(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <green>Es sind <gold>" + strings.length + " <green>Spieler auf der Whitelist! <white>[<gold> " + String.join(" <white>| <gold>", strings) + " <white>]")); // 0xBUKKIT
         }
 
         return strings.length;
