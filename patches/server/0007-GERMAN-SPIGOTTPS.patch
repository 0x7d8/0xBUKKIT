From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: root <root@ROBERT-PC.localdomain>
Date: Sat, 11 Jun 2022 09:58:07 +0200
Subject: [PATCH] GERMAN SPIGOTTPS

spi

spi

spi

spi

spi

spi

spi

spi

spi

spi

spi

spi

spi

diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 088239d17aa8178cf8af09ec23cfd4deaaf2bbb6..42d26c76a50589c2789e706210b2dfced9a68f7b 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -4,6 +4,7 @@ import net.minecraft.server.MinecraftServer;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
+import net.kyori.adventure.text.minimessage.MiniMessage;
 
 public class TicksPerSecondCommand extends Command
 {
@@ -11,8 +12,8 @@ public class TicksPerSecondCommand extends Command
     public TicksPerSecondCommand(String name)
     {
         super( name );
-        this.description = "Gets the current ticks per second for the server";
-        this.usageMessage = "/tps";
+        this.description = "TPS BEFEHL";
+        this.usageMessage = "/tps [ mem ]";
         this.setPermission( "bukkit.command.tps" );
     }
 
@@ -31,23 +32,20 @@ public class TicksPerSecondCommand extends Command
         for ( int i = 0; i < tps.length; i++) {
             tpsAvg[i] = TicksPerSecondCommand.format( tps[i] );
         }
-        sender.sendMessage(ChatColor.GOLD + "TPS from last 5s, 1m, 5m, 15m: " + org.apache.commons.lang.StringUtils.join(tpsAvg, ", ")); // Purpur
+
         if (args.length > 0 && args[0].equals("mem") && sender.hasPermission("bukkit.command.tpsmemory")) {
-            sender.sendMessage(ChatColor.GOLD + "Current Memory Usage: " + ChatColor.GREEN + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / (1024 * 1024)) + "/" + (Runtime.getRuntime().totalMemory() / (1024 * 1024)) + " mb (Max: " + (Runtime.getRuntime().maxMemory() / (1024 * 1024)) + " mb)");
-            if (!hasShownMemoryWarning) {
-                sender.sendMessage(ChatColor.RED + "Warning: " + ChatColor.GOLD + " Memory usage on modern garbage collectors is not a stable value and it is perfectly normal to see it reach max. Please do not pay it much attention.");
-                hasShownMemoryWarning = true;
-            }
+            sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <green>RAM <white>[<gold> NUTZUNG <white>]<green>: <white>[ <gold>" + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / (1024 * 1024)) + "<gold>MB <white>/ <gold>" + (Runtime.getRuntime().maxMemory() / (1024 * 1024)) + "<gold>MB <white>]"));
+            return true;
         }
         // Paper end
-
+        sender.sendMessage(MiniMessage.miniMessage().deserialize("<white>[<gray>Server<white>] <green>TPS <white>[<gold> 5s <white>| <gold>1m <white>| <gold>5m <white>| <gold>15m <white>]<green>: <white>[ " + org.apache.commons.lang.StringUtils.join(tpsAvg, " <white>| ") + "<white> ]")); // Purpur
         return true;
     }
 
     private boolean hasShownMemoryWarning; // Paper
     private static String format(double tps) // Paper - Made static
     {
-        return ( ( tps > 18.0 ) ? ChatColor.GREEN : ( tps > 16.0 ) ? ChatColor.YELLOW : ChatColor.RED ).toString()
+        return ( ( tps > 18.0 ) ? "<green>" : ( tps > 16.0 ) ? "<yellow>" : "<red>" ).toString()
                 + ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 ); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
     }
 }
